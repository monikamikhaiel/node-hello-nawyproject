name: build & deploy

on:
  workflow_call:
  # pull_request:
  #   types: [closed]
  push:
    branches:
    - master
permissions:
  id-token: write
  contents: write
  # workflows: write

jobs:
  build-push:
    runs-on: ubuntu-latest
    environment: local 
    outputs:
      commit: ${{ steps.short-sha.outputs.COMMIT_SHORT_SHA }}
    # env: 
    #      region: eu-north-1
    #      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #      COMMIT_SHORT_SHA: latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      # ESLint and Prettier must be in `package.json`
      - name: Install Node.js dependencies
        run: npm ci

      - name: Run linters
        uses: wearerequired/lint-action@v2
        with:
          # eslint: true
          prettier: true
          auto_fix: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          commit: true
          git_no_verify: false
          git_name: Lint Action
          commit_message: Fix code style issues with ${linter}
      - name: Checkout after lint 
        uses: actions/checkout@v4
      - name: Update local checkout to latest commit
        run: |
             git fetch origin ${{ github.ref }}
             git checkout ${{ github.ref }}
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
      #   with:
      #     aws-region: eu-north-1
      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2
      - name: Set short git commit SHA
        id: short-sha
        run: |
          shortSha=$(git rev-parse  HEAD )
          echo "COMMIT_SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
          # echo "COMMIT_SHORT_SHA=$shortSha" >> $GITHUB_ENV
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # - run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/e7o5d6f3
      -
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          # tags: public.ecr.aws/e7o5d6f3/nodejsnawy:${{ env.COMMIT_SHORT_SHA }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/nawy_node_app:${{ env.COMMIT_SHORT_SHA }}



  deploy:
    runs-on: ubuntu-latest
    environment: local 
    # if: ${{ success() }}
    needs: [build-push]
    env:
         TF_VAR_DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
         TF_VAR_Github_sha: ${{ needs.build-push.outputs.commit }}
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         AWS_profile: nawy
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set short git commit SHA
        id: short-sha
        run: |
          shortSha=$(git rev-parse  HEAD )
          echo "COMMIT_SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
          # echo "COMMIT_SHORT_SHA=$shortSha" >> $GITHUB_ENV
          TF_VAR_Github_sha=$shortSha
      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0    
      - name: Terraform init
        id: init
        run: terraform init 
        working-directory: ./terraform
  
      # - name: Terraform format & validate 
      #   id: fmt
      #   run: terraform fmt -check && terraform validate
      #   working-directory: ./terraform
     
      - name: Terraform plan & apply
        run: terraform plan -no-color -input=false && terraform apply -auto-approve -input=false -var="Github_sha=${{ env.COMMIT_SHORT_SHA }}"
        working-directory: ./terraform
